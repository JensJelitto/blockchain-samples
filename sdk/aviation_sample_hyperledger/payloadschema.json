{
    "swagger": "2.0",
    "info": {
        "version": "4.2",
        "title": "IBM IoT Blockchain Aviation Sample Contract Schema",
        "id": "https://github.com/ibm-watson-iot/blockchain-samples/blob/master/aviation_sample_hyperledger/payloadschema.json",
        "description": "A schema for a generic sample aviation contract to track life limited parts. This schema follows the 'multi-asset', 'CRUD API' and 'partial state as event' IoT blochchain contract patterns. The use of JSON Schema is more for definition and documentation purposes than strict validation purposes at this time."
    },
    "host": "127.0.0.1:3000",
    "schemes": [
        "http",
        "https",
        "tls"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/chaincode": {
            "post": {
                "summary": "Service endpoint for Chaincode operations",
                "description": "The /chaincode endpoint receives requests to deploy, invoke, and query a target Chaincode. This service endpoint implements the JSON RPC 2.0 specification with the payload identifying the desired Chaincode operation within the 'method' property.",
                "tags": [
                    "Chaincode"
                ],
                "operationId": "chaincodeOp",
                "parameters": [{
                    "name": "ChaincodeOpPayload",
                    "in": "body",
                    "description": "Chaincode JSON RPC 2.0 payload",
                    "required": true,
                    "schema": {
                    "$ref": "#/definitions/ChaincodeOpPayload"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "Chaincode operation successful",
                        "schema": {
                            "$ref": "#/definitions/ChaincodeOpSuccess"
                        }
                    },
                    "default": {
                        "description": "Chaincode operation failed",
                        "schema": {
                            "$ref": "#/definitions/ChaincodeOpFailure"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ChaincodeOpPayload": {
           "type": "object",
           "properties": {
              "jsonrpc": {
                 "type": "string",
                 "default": "2.0",
                 "description": "A string specifying the version of the JSON-RPC protocol. Must be exactly '2.0'."
              },
              "method": {
                 "type": "string",
                 "enum": ["deploy", "invoke", "query"],
                 "description": "the command's service endpoint for deployment, invocation or query"
              },
              "params": {
                  "$ref": "#/definitions/ChaincodeSpec",
                  "description": "A required Chaincode specification message identifying the target chaincode."
              },
              "id": {
                 "type": "integer",
                 "format": "int64",
                 "description": "An integer number used to correlate the request and response objects. If it is not included, the request is assumed to be a notification and the server will not generate a response."
              }
           },
           "required": [
              "jsonrpc",
              "method",
              "params",
              "id"
           ]
        },
        "ConfidentialityLevel":{
            "type": "string",
            "default": "PUBLIC",
            "example": "PUBLIC",
            "enum":[
                "PUBLIC",
                "CONFIDENTIAL"
              ],
            "description": "Confidentiality level of the Chaincode."
        },
        "ChaincodeSpec": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "default": "GOLANG",
                    "example": "GOLANG",
                    "enum":[
                        "UNDEFINED",
                        "GOLANG",
                        "NODE"
                    ],
                    "description": "Chaincode specification language."
                },
                "chaincodeID": {
                    "$ref": "#/definitions/ChaincodeID",
                    "description": "Unique Chaincode identifier."
                },
                "ctorMsg": {
                    "$ref": "#/definitions/ChaincodeInput",
                    "description": "Specific function to execute within the Chaincode."
                },
                "secureContext": {
                    "type": "string",
                    "description": "Username when security is enabled."
                },
                "confidentialityLevel": {
                    "$ref": "#/definitions/ConfidentialityLevel",
                    "description": "Confidentiality level of the Chaincode."
                }
            }
        },
        "ChaincodeID": {
            "type": "object",
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Chaincode location in the file system. This value is required by the deploy transaction."
                },
                "name": {
                    "type": "string",
                    "description": "Chaincode name identifier. This value is required by the invoke and query transactions."
                }
            }
        },
        "ChaincodeInput": {
            "type": "object",
            "description": "the payload for a deploy, invoke or query message",
            "oneOf": [
                {
                    "$ref": "#/definitions/ChaincodeInputDeploy"
                },
                {
                    "$ref": "#/definitions/ChaincodeInputInvoke"
                },
                {
                    "$ref": "#/definitions/ChaincodeInputQuery"
                }
            ]
        },
        "ChaincodeInputDeploy": {
            "type": "object",
            "description": "the payload for a deploy message",
            "oneOf": [
                {
                    "$ref": "#/definitions/API/init"
                }
            ]
        },
        "ChaincodeInputInvoke": {
            "type": "object",
            "description": "the payload for an invoke message",
            "oneOf": [
                {
                    "$ref": "#/definitions/API/createAsset"
                },
                {
                    "$ref": "#/definitions/API/updateAsset"
                },
                {
                    "$ref": "#/definitions/API/deleteAsset"
                },
                {
                    "$ref": "#/definitions/API/deletePropertiesFromAsset"
                },
                {
                    "$ref": "#/definitions/API/setLoggingLevel"
                },
                {
                    "$ref": "#/definitions/API/setCreateOnUpdate"
                },
                {
                    "$ref": "#/definitions/API/deleteAllAssets"
                }
            ]
        },
        "ChaincodeInputQuery": {
            "type": "object",
            "description": "the payload for a query message",
            "oneOf": [
                {
                    "$ref": "#/definitions/API/readAsset"
                },
                {
                    "$ref": "#/definitions/API/readAllAssets"
                },
                {
                    "$ref": "#/definitions/API/readAssetHistory"
                },
                {
                    "$ref": "#/definitions/API/readAssetSamples"
                },
                {
                    "$ref": "#/definitions/API/readAssetSchemas"
                },
                {
                    "$ref": "#/definitions/API/readRecentStates"
                },
                {
                    "$ref": "#/definitions/API/readContractState"
                }
            ]
        },
        "rpcResponse": {
           "type": "object",
           "properties": {
              "Status": {
                 "type": "string",
                 "default": "OK",
                 "description": "A string confirming successful request execution."
              },
              "Message": {
                 "type": "string",
                 "default": "500",
                 "description": "Additional information about the response or values returned."
              }
           },
           "required": [
             "Status"
           ]
        },
        "rpcError": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "format": "int64",
              "default": -32700,
              "description": "A number that indicates the error type that occurred."
            },
            "message": {
              "type": "string",
              "default": "Parse error",
              "description": "A string providing a short description of the error."
            },
            "data": {
              "type": "string",
              "default": "Error unmarshalling chaincode request payload: unexpected end of JSON input",
              "description": "A primitive or structured value that contains additional information about the error (e.g. detailed error information, nested errors etc.)."
            }
          },
          "required": [
            "code",
            "message"
          ]
        },
        "API": {
            "type": "object",
            "description": "The API for the tradelane sample contract consisting of the init function, the crud functions to change state, and a set of query functions for asset state, asset history, recent states, and so on.",
            "properties": {
                "init": {
                    "type": "object",
                    "description": "Initializes the contract when started, either by deployment or by peer restart.",
                    "properties": {
                        "method": "deploy",
                        "function": {
                            "type": "string",
                            "enum": [
                                "init"
                            ],
                            "description": "init function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/initEvent"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "createAsset": {
                    "type": "object",
                    "description": "Create an asset. One argument, a JSON encoded event. The 'assetID' property is required with zero or more writable properties. Establishes an initial asset state.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "createAsset"
                            ],
                            "description": "createAsset function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/event"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "updateAsset": {
                    "type": "object",
                    "description": "Update the state of an asset. The one argument is a JSON encoded event. The 'assetID' property is required along with one or more writable properties. Establishes the next asset state. ",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "updateAsset"
                            ],
                            "description": "updateAsset function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/event"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "deleteAsset": {
                    "type": "object",
                    "description": "Delete an asset, its history, and any recent state activity. Argument is a JSON encoded string containing only an 'assetID'.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deleteAsset"
                            ],
                            "description": "deleteAsset function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDKey"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "deletePropertiesFromAsset": {
                    "type": "object",
                    "description": "Delete one or more properties from an asset's state. Argument is a JSON encoded string containing an 'assetID' and an array of qualified property names. For example, in an event object containing common and custom properties objects, the argument might look like {'assetID':'A1',['common.location', 'custom.carrier', 'custom.temperature']} and the result of that invoke would be the removal of the location, carrier and temperature properties. The missing temperature would clear a 'OVERTEMP' alert when the rules engine runs.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deletePropertiesFromAsset"
                            ],
                            "description": "deletePropertiesFromAsset function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDandPropertyArray"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        }
                    }
                },
                "deleteAllAssets": {
                    "type": "object",
                    "description": "Delete the state of all assets. No arguments are accepted. For each managed asset, the state and history are erased, and the asset is removed if necessary from recent states.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "deleteAllAssets"
                            ],
                            "description": "deleteAllAssets function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        }
                    }
                },
                "readAsset": {
                    "type": "object",
                    "description": "Returns the state an asset. Argument is a JSON encoded string. The arg is an 'assetID' property.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAsset"
                            ],
                            "description": "readAsset function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDKey"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        },
                        "result": {
                            "$ref": "#/definitions/state"
                        }
                    }
                },
                "readAllAssets": {
                    "type": "object",
                    "description": "Returns the state of all assets as an array of JSON encoded strings. Accepts no arguments. For each managed asset, the state is read from the ledger and added to the returned array. Array is sorted by 'assetID'.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAllAssets"
                            ],
                            "description": "readAllAssets function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "$ref": "#/definitions/stateArray"
                        }
                    }
                },
                "readAssetHistory": {
                    "type": "object",
                    "description": "Requests a specified number of history states for an assets. Returns an array of states sorted with the most recent first. The 'assetID' property is required and the count property is optional. A missing count, a count of zero, or too large a count returns all existing history states.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetHistory"
                            ],
                            "description": "readAssetHistory function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/assetIDandCount"
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "args are JSON encoded strings"
                        },
                        "result": {
                            "$ref": "#/definitions/stateArrayRecentFirst"
                        }
                    }
                },
                "readAssetSchemas": {
                    "type": "object",
                    "description": "Returns a string generated from the schema that contains APIs and Objects as specified in the file 'generate.json' in the /scripts folder.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetSchemas"
                            ],
                            "description": "readAssetSchemas function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "type": "string",
                            "description": "JSON encoded object containing selected schemas"
                        }
                    }
                },
                "readAssetSamples": {
                    "type": "object",
                    "description": "Returns a string generated from the schema that contains sample Objects as specified in the file 'generate.json' in the /scripts folder.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readAssetSamples"
                            ],
                            "description": "readAssetSamples function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "type": "string",
                            "description": "JSON encoded object containing selected sample data"
                        }
                    }
                },
                "readRecentStates": {
                    "type": "object",
                    "description": "Returns the state of recently updated assets as an array of objects sorted with the most recently updated asset first. Each asset appears exactly once up to a maxmum of 20 in this version of the contract.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readRecentStates"
                            ],
                            "description": "readRecentStates function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "$ref": "#/definitions/stateArrayRecentFirst"
                        }
                    }
                },
                "readContractState": {
                    "type": "object",
                    "description": "Returns the state of the contract, which includes its version, its nickname and a list of 'assetID's that are currently managed.",
                    "properties": {
                        "method": "query",
                        "function": {
                            "type": "string",
                            "enum": [
                                "readContractState"
                            ],
                            "description": "readContractState function"
                        },
                        "args": {
                            "type": "array",
                            "items": {},
                            "minItems": 0,
                            "maxItems": 0,
                            "description": "accepts no arguments"
                        },
                        "result": {
                            "$ref": "#/definitions/contractState"
                        }
                    }
                },
                "setLoggingLevel": {
                    "type": "object",
                    "description": "Sets the logging level in the contract.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "setLoggingLevel"
                            ],
                            "description": "setLoggingLevel function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "logLevel": {
                                    "type": "string",
                                    "enum": [
                                        "CRITICAL",
                                        "ERROR",
                                        "WARNING",
                                        "NOTICE",
                                        "INFO",
                                        "DEBUG"                                    
                                    ]
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "logging levels indicate what you see"
                        }
                    }
                },
                "setCreateOnUpdate": {
                    "type": "object",
                    "description": "Allow updateAsset to redirect to createAsset when 'assetID' does not exist.",
                    "properties": {
                        "method": "invoke",
                        "function": {
                            "type": "string",
                            "enum": [
                                "setCreateOnUpdate"
                            ],
                            "description": "setCreateOnUpdate function"
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "setCreateOnUpdate": {
                                    "type": "boolean"
                                }
                            },
                            "minItems": 1,
                            "maxItems": 1,
                            "description": "True for redirect allowed, false for error on asset does not exist."
                        }
                    }
                }
            }
        },
        "ChaincodeOpSuccess": {
           "type": "object",
           "properties": {
              "jsonrpc": {
                 "type": "string",
                 "default": "2.0",
                 "description": "A string specifying the version of the JSON-RPC protocol. Must be exactly '2.0'."
              },
              "result": {
                  "$ref": "#/definitions/rpcResponse",
                  "description": "The value of this element is determined by the method invoked on the server."
              },
              "id": {
                  "type": "integer",
                  "format": "int64",
                  "default": 123,
                  "description": "This number will be the same as the value of the id member in the request object."
              }
           },
           "required": [
              "jsonrpc",
              "result",
              "id"
           ]
        },
        "ChaincodeOpFailure": {
           "type": "object",
           "properties": {
              "jsonrpc": {
                 "type": "string",
                 "default": "2.0",
                 "description": "A string specifying the version of the JSON-RPC protocol. Must be exactly '2.0'."
              },
              "error": {
                 "$ref": "#/definitions/rpcError",
                 "description": "A structured value specifying the code and description of the error that occurred."
             },
             "id": {
                 "type": "integer",
                 "format": "int64",
                 "default": 123,
                 "description": "This number will be the same as the value of the id member in the request object. If there was an error detecting the id in the request object (e.g. Parse error/Invalid Request), it will be null."
             }
          },
          "required": [
            "jsonrpc",
            "error",
            "id"
          ]
        },
        "version": {
            "type": "string",
            "description": "The version number of the current contract"
        },
        "nickname": {
            "type": "string",
            "default": "TRADELANE",
            "description": "The nickname of the current contract"
        },
        "assetID": {
            "type": "string",
            "description": "The ID of a managed asset. The resource focal point for a smart contract."
        },
        "assetIDKey": {
            "type": "object",
            "description": "An object containing only an 'assetID' for use as an argument to read or delete.",
            "properties": {
                "assetID": {
                    "$ref": "#/definitions/assetID"
                }
            }
        },
        "alertName": {
            "type": "string",
            "enum": [
                "OVERTTEMP"
            ],
            "description": "Alerts are triggered or cleared by rules that are run against incoming events. This contract considers any active alert to created a state of non-compliance."
        },
        "alertStatus": {
            "type": "object",
            "description": "Active means that the alert is in force in this state. Raised means that the alert became active as the result of the event that generated this state. Cleared means that the alert became inactive as the result of the event that generated this state.",
            "properties": {
                "active": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/alertName"
                    },
                    "minItems": 0
                },
                "raised": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/alertName"
                    },
                    "minItems": 0
                },
                "cleared": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/alertName"
                    },
                    "minItems": 0
                }
            }
        },
        "geo": {
            "description": "A geographical coordinate",
            "type": "object",
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "assetIDandCount": {
            "type": "object",
            "description": "Requested 'assetID' with item 'count'.",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "assetID": {
                    "$ref": "#/definitions/assetID"
                }
            },
            "required": [
                "assetID"
            ]
        },
        "qualPropertyNameArray": {
            "type": "array",
            "items": {
                "type": "string",
                "description": "The qualified name of a property. E.g. 'event.common.carrier', 'event.custom.temperature', etc." 
            }
        },
        "assetIDandPropertyArray": {
            "type": "object",
            "description": "Requested 'assetID' with a list of qualified property names.",
            "properties": {
                "qualPropsToDelete": {
                    "$ref": "#/definitions/qualPropertyNameArray"
                },
                "assetID": {
                    "$ref": "#/definitions/assetID"
                }
            },
            "required": [
                "assetID",
                "qualPropsToDelete"
            ]
        },
        "eventWithFunction": {
            "type": "object",
            "description": "function and string parameter that created this state object",
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "parameters to the function, usually args[0] is populated with a JSON encoded event object"
                    }
                },
                "function": {
                    "type": "string",
                    "description": "function that created this state object"
                },
                "redirectedFromFunction": {
                    "type": "string",
                    "description": "function that originally received the event"
                }
            }
        },
        "initEvent": {
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/definitions/assetID"
                },
                "nickname": {
                    "$ref": "#/definitions/nickname"
                }
            },
            "required": [
                "version"
            ],
            "description": "event sent to init on deployment"
        },
        "airline": {
            "type": "object",
            "description": "The set of writable properties that define an airline's state.",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the airline."
                },
                "code": {
                    "type": "string",
                    "description": "The airline 3 letter code."
                }
            },
            "required": [
                "name",
                "code"
            ]
        },
        "airplane": {
            "type": "object",
            "description": "The set of writable properties that define an airplane's state.",
            "properties": {
                "model": {
                    "type": "string",
                    "description": "The airplane model or family name."
                },
                "variant": {
                    "type": "string",
                    "description": "A manufacturer-specific variant identifier for this airplane."
                }
            },
            "required": [
                "model"
            ]
        },
        "assembly": {
            "type": "object",
            "description": "The set of writable properties that define an assembly's state.",
            "properties": {
                "ATAcode": {
                    "type": "string",
                    "description": "The ATA code defining the assembly type, e.g. 32=landing gear, 32-50=steering."
                },
                "name": {
                    "type": "string",
                    "description": "The assembly name."
                },
                "ALRS": {
                    "type": "string",
                    "description": "Alerting service zone."
                },
                "lifeLimitInitial": {
                    "type": "integer",
                    "description": "Initial assembly life limit."
                },
                "lifeLimitUsed": {
                    "type": "integer",
                    "description": "Assembly life limit that has been used, including adjustments."
                }
            },
            "required": [
                "ATAcode",
                "name"
            ]
        },
        "part": {
            "type": "object",
            "description": "The set of writable properties that define a part's state.",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The part name."
                },
                "partNumber": {
                    "type": "string",
                    "description": "Part number."
                },
                "vendorName": {
                    "type": "string",
                    "description": "Vendor name."
                },
                "vendorNumber": {
                    "type": "string",
                    "description": "Vendor part number."
                },
                "lifeLimitInitial": {
                    "type": "integer",
                    "description": "Initial part life limit."
                },
                "lifeLimitUsed": {
                    "type": "integer",
                    "description": "Part life limit that has been used, including adjustments."
                }
            },
            "required": [
                "partNumber",
                "name"
            ]
        },
        "activity": {
            "type": "object",
            "description": "The set of writable properties that define an activity.",
            "properties": {
                "activityType": {
                    "type": "string",
                    "description": "The type of the activity."
                },
                "activityNumber": {
                    "type": "string",
                    "description": "Activity number."
                },
                "activityDate": {
                    "type": "string",
                    "description": "Date the activity occured (e.g. date from aechive of activities being copied into this ledger)."
                },
                "activityDetail": {
                    "type": "string",
                    "description": "Detailed description of the activity."
                }
            },
            "required": [
                "type",
                "name"
            ]
        },
        "eventCommon": {
            "type": "object",
            "description": "The set of common writable properties for any event to a contract that adheres to the IoT contract pattern 'partial state as event'.",
            "properties": {
                "assetID": {
                    "$ref": "#/definitions/assetID"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Optional device timestamp. Note that the contract retains the blockchain-assigned transaction UUID and timestamp, which reflect the time that the event arrived at the Hyperledger fabric. The device timestamp has meaning that is relevant to the device, asset and application context."
                },
                "location": {
                    "$ref": "#/definitions/geo"
                },
                "extension": {
                    "type": "array",
                    "description": "Application managed array of extension properties. Opaque to contract. To be used in emergencies or for sidecar information that is not relevant to contract rule processing.",
                    "minItems": 0,
                    "items": { "type": "object", "properties": {} }
                },
                "references": {
                    "type": "array",
                    "description": "An array of external references relevant to this asset.",
                    "minItems": 0,
                    "items": { "type": "string" }
                }
            },
            "required": [
                "assetID"
            ]
        },
        "eventAirline": {
            "type": "object",
            "description": "The set of writable properties for an airline crud event.",
            "properties": {
                "commonevent": {
                    "$ref": "#/definitions/eventCommon"
                },
                "airlineevent": {
                    "$ref": "#/definitions/airline"
                },
                "activityevent": {
                    "$ref": "#/definitions/activity"
                }
            }
        },
        "eventAirplane": {
            "type": "object",
            "description": "The set of writable properties for an airplane crud event.",
            "properties": {
                "commonevent": {
                    "$ref": "#/definitions/eventCommon"
                },
                "airplaneevent": {
                    "$ref": "#/definitions/airplane"
                },
                "activityevent": {
                    "$ref": "#/definitions/activity"
                }
            }
        },
        "eventAssembly": {
            "type": "object",
            "description": "The set of writable properties for an assembly crud event.",
            "properties": {
                "commonevent": {
                    "$ref": "#/definitions/eventCommon"
                },
                "assemblyevent": {
                    "$ref": "#/definitions/assembly"
                },
                "activityevent": {
                    "$ref": "#/definitions/activity"
                }
            }
        },
        "eventPart": {
            "type": "object",
            "description": "The set of writable properties for a part crud event.",
            "properties": {
                "commonevent": {
                    "$ref": "#/definitions/eventCommon"
                },
                "partevent": {
                    "$ref": "#/definitions/part"
                },
                "activityevent": {
                    "$ref": "#/definitions/activity"
                }
            }
        },
        "event": {
            "type": "object",
            "description": "The set of event objects for this contract.",
            "properties": {
                "oneOf": {
                    "airline": { "$ref": "#/definitions/eventAirline" },
                     "airplane": { "$ref": "#/definitions/eventAirplane" },
                     "assembly": { "$ref": "#/definitions/eventAssembly" },
                     "part": { "$ref": "#/definitions/eventPart" }
                }
            }
        },
        "stateCommon": {
            "type": "object",
            "description": "A set of properties that constitute a complete asset state. Includes event properties and any other calculated properties such as compliance related alerts.",
            "properties": {
                "txntimestamp": {
                    "type": "string",
                    "description": "Transaction timestamp matching that in the blockchain."
                },
                "txnuuid": {
                    "type": "string",
                    "description": "Transaction UUID matching that in the blockchain."
                },
                "compliant": {
                    "type": "boolean",
                    "description": "A contract-specific indication that this asset is compliant."
                },
                "alerts": {
                    "$ref": "#/definitions/alertStatus"
                },
                "txnEvent": {
                    "$ref": "#/definitions/eventWithFunction"
                }
            }
        },
        "stateAirline": {
            "type": "object",
            "description": "The set of all properties for an airline ledger state.",
            "properties": {
                "airlinestate": {
                    "$ref": "#/definitions/eventAirline"
                },
                "commonstate": {
                    "$ref": "#/definitions/stateCommon"
                },
                "airplanes": {
                    "type": "array",
                    "description": "An array of airplane IDs belonging to this airline.",
                    "items": {
                        "$ref": "#/definitions/assetID"
                    }
                },
                "activities": {
                    "type": "array",
                    "description": "An array of activity IDs that occured for this airline.",
                    "items": {
                        "$ref": "#/definitions/assetID"
                    }
                }
            }
        },
        "stateAirplane": {
            "type": "object",
            "description": "The set of all properties for an airplane ledger state.",
            "properties": {
                "airplanestate": {
                    "$ref": "#/definitions/eventAirplane"
                },
                "commonstate": {
                    "$ref": "#/definitions/stateCommon"
                },
                "assemblies": {
                    "type": "array",
                    "description": "An array of assembly IDs belonging to this airplane.",
                    "items": {
                        "$ref": "#/definitions/assetID"
                    }
                },
                "activities": {
                    "type": "array",
                    "description": "An array of activity IDs that occured on this airplane.",
                    "items": {
                        "$ref": "#/definitions/assetID"
                    }
                }
            }
        },
        "stateAssembly": {
            "type": "object",
            "description": "The set of all properties for an assembly ledger state.",
            "properties": {
                "assemblystate": {
                    "$ref": "#/definitions/eventAssembly"
                },
                "commonstate": {
                    "$ref": "#/definitions/stateCommon"
                },
                "parts": {
                    "type": "array",
                    "description": "An array of part IDs belonging to this assembly.",
                    "items": {
                        "$ref": "#/definitions/assetID"
                    }
                },
                "activities": {
                    "type": "array",
                    "description": "An array of activity IDs that occured on this assembly.",
                    "items": {
                        "$ref": "#/definitions/assetID"
                    }
                }
            }
        },
        "statePart": {
            "type": "object",
            "description": "The set of all properties for a part ledger state.",
            "properties": {
                "partstate": {
                    "$ref": "#/definitions/eventPart"
                },
                "commonstate": {
                    "$ref": "#/definitions/stateCommon"
                },
                "activities": {
                    "type": "array",
                    "description": "An array of activity IDs that occured on this part.",
                    "items": {
                        "$ref": "#/definitions/assetID"
                    }
                }
            }
        },
        "state": {
            "type": "object",
            "description": "The set of state objects for this contract.",
            "properties": {
                "oneOf": {
                    "airline": { "$ref": "#/definitions/stateAirline" },
                     "airplane": { "$ref": "#/definitions/stateAirplane" },
                     "assembly": { "$ref": "#/definitions/stateAssembly" },
                     "part": { "$ref": "#/definitions/statePart" }
                }
            }
        },
        "stateArray": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/state"
            },
            "minItems": 0,
            "description": "an array of states, often for different assets"
        },
        "stateArrayRecentFirst": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/state"
            },
            "minItems": 0,
            "description": "an array of states for one asset sorted by timestamp with the most recent entry first"
        },
        "stateArrayRecentFirstMap": {
            "type": "Object",
            "description": "",
            "properties": {
                "assetID": {
                    "$ref": "#/definitions/assetID"
                },
                "statesRecentFirst": {
                    "$ref": "#/definitions/stateArrayRecentFirst"
                }                
            }
        },
        "contractState": {
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/definitions/version"
                },
                "nickname": {
                    "$ref": "#/definitions/nickname"
                },
                "activeAssets": {
                    "type": "array",
                    "description": "array containing actively managed asset IDs",
                    "items": {
                        "$ref": "#/definitions/assetID"
                    }
                }
            }
        }
    }
}